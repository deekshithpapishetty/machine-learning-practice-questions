# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

# Convert target variable to binary: 1 if Price > median, else 0
df['Price_Class'] = (df['Price'] > df['Price'].median()).astype(int)

# Feature selection
X = df.drop(columns=['Price', 'Price_Class'])
y = df['Price_Class']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 1. Logistic Regression
from sklearn.linear_model import LogisticRegression

log_reg = LogisticRegression(solver='lbfgs', max_iter=1000)
log_reg.fit(X_train, y_train)
y_pred_log_reg = log_reg.predict(X_test)

# 2. SVM Classifier
from sklearn.svm import SVC

svm_model = SVC(kernel='linear')
svm_model.fit(X_train, y_train)
y_pred_svm = svm_model.predict(X_test)

# Evaluate the models
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

print("Logistic Regression Accuracy:", accuracy_score(y_test, y_pred_log_reg))
print("SVM Accuracy:", accuracy_score(y_test, y_pred_svm))

print("\nLogistic Regression Classification Report:")
print(classification_report(y_test, y_pred_log_reg))

print("\nSVM Classification Report:")
print(classification_report(y_test, y_pred_svm))

# Confusion Matrices
fig, ax = plt.subplots(1, 2, figsize=(12, 6))

# Logistic Regression Confusion Matrix
conf_matrix_log_reg = confusion_matrix(y_test, y_pred_log_reg)
sns.heatmap(conf_matrix_log_reg, annot=True, cmap='Blues', fmt='d', ax=ax[0])
ax[0].set_title('Confusion Matrix - Logistic Regression')

# SVM Confusion Matrix
conf_matrix_svm = confusion_matrix(y_test, y_pred_svm)
sns.heatmap(conf_matrix_svm, annot=True, cmap='Blues', fmt='d', ax=ax[1])
ax[1].set_title('Confusion Matrix - SVM')

plt.tight_layout()
plt.show()